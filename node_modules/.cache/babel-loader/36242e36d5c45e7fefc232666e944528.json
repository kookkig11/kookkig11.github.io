{"ast":null,"code":"import * as React from 'react';\nimport { AccessibilityInfo, Appearance } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\nconst Provider = ({ ...props\n}) => {\n  const colorSchemeName = !props.theme && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light';\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState(false);\n  const [colorScheme, setColorScheme] = React.useState(colorSchemeName);\n\n  const handleAppearanceChange = preferences => {\n    const {\n      colorScheme\n    } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    if (!props.theme) {\n      AccessibilityInfo.addEventListener('reduceMotionChanged', setReduceMotionEnabled);\n    }\n\n    return () => {\n      if (!props.theme) {\n        AccessibilityInfo.removeEventListener('reduceMotionChanged', setReduceMotionEnabled);\n      }\n    };\n  }, [props.theme]);\n  React.useEffect(() => {\n    if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);\n    return () => {\n      if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const {\n      theme: providedTheme\n    } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\n      return { ...theme,\n        animation: { ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1\n        }\n      };\n    }\n  };\n\n  const {\n    children,\n    settings\n  } = props;\n  return /*#__PURE__*/React.createElement(PortalHost, null, /*#__PURE__*/React.createElement(SettingsProvider, {\n    value: settings || {\n      icon: MaterialCommunityIcon\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: getTheme()\n  }, children)));\n};\n\nexport default Provider;","map":{"version":3,"sources":["Provider.tsx"],"names":["Provider","props","colorSchemeName","Appearance","React","handleAppearanceChange","preferences","colorScheme","setColorScheme","AccessibilityInfo","getTheme","theme","providedTheme","animation","scale","reduceMotionEnabled","settings","icon","MaterialCommunityIcon"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { AccessibilityInfo, Appearance, ColorSchemeName } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\n    false\n  );\n  const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\n    colorSchemeName\n  );\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    if (!props.theme) {\n      AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        AccessibilityInfo.removeEventListener(\n          'reduceMotionChanged',\n          setReduceMotionEnabled\n        );\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    if (!props.theme) Appearance?.addChangeListener(handleAppearanceChange);\n    return () => {\n      if (!props.theme)\n        Appearance?.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}