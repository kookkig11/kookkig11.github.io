{"ast":null,"code":"import React from 'react';\nimport color from 'color';\nimport { Text, StyleSheet, Animated } from 'react-native';\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\nconst AFFIX_OFFSET = 12;\nconst AffixContext = /*#__PURE__*/React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\n\nconst AffixAdornment = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal\n}) => {\n  return /*#__PURE__*/React.createElement(AffixContext.Provider, {\n    value: {\n      side,\n      textStyle,\n      topPosition,\n      onLayout,\n      visible,\n      paddingHorizontal\n    }\n  }, affix);\n};\n\nconst TextInputAffix = ({\n  text,\n  textStyle: labelStyle,\n  theme\n}) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  const offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  const style = {\n    top: topPosition,\n    [side]: offset\n  };\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix); // @component-docs ignore-next-line\n\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"sources":["TextInputAffix.tsx"],"names":["AFFIX_OFFSET","AffixContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","paddingHorizontal","TextInputAffix","theme","React","textColor","offset","style","top","styles","opacity","inputRange","outputRange","onLayout","container","position","justifyContent","alignItems","withTheme"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle, labelStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}