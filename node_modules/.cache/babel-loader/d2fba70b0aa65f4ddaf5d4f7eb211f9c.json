{"ast":null,"code":"import { LABEL_PADDING_HORIZONTAL, ADORNMENT_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from './constants';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nexport const calculateLabelTopPosition = (labelHeight, height = 0, optionalPadding = 0) => {\n  const customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\nexport const calculateInputHeight = (labelHeight, height = 0, minHeight) => {\n  const finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\nexport const calculatePadding = props => {\n  const {\n    height,\n    multiline = false\n  } = props;\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = props => {\n  const {\n    dense\n  } = props;\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid\n}) => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  dense,\n  offset,\n  isAndroid\n}) => {\n  const refFontSize = scale * fontSize;\n  let result = pad;\n\n  if (height) {\n    return {\n      paddingTop: Math.max(0, (height - fontSize) / 2),\n      paddingBottom: Math.max(0, (height - fontSize) / 2)\n    };\n  }\n\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontSize / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontSize * scale) : Math.min(offset / 2, refFontSize * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : 0;\n      }\n    }\n\n    result = Math.floor(result);\n  }\n\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles\n}) => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const {\n    paddingTop,\n    paddingBottom\n  } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return {\n        paddingTop,\n        paddingBottom\n      };\n    } // return pad for flat input without label\n\n\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom; // adjust top padding for iOS\n\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    } // adjust paddings for iOS if no label\n\n\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\nexport const interpolatePlaceholder = (labeled, hasActiveOutline) => labeled.interpolate({\n  inputRange: [0, 1],\n  outputRange: [hasActiveOutline ? 0 : 1, 1]\n});\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight\n}) {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n  const halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset\n}) {\n  return (height - affixHeight + labelYOffset) / 2;\n}\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig\n}) => {\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n  adornmentConfig.forEach(({\n    type,\n    side\n  }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n  return {\n    paddingLeft,\n    paddingRight\n  };\n};","map":{"version":3,"sources":["helpers.tsx"],"names":["calculateLabelTopPosition","height","optionalPadding","customHeight","Math","calculateInputHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","dense","isAndroid","refFontSize","scale","topPosition","offset","adjustPaddingOut","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","fontSize","interpolatePlaceholder","inputRange","outputRange","hasActiveOutline","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","labelYOffset","calculateFlatInputHorizontalPadding","adornmentConfig","paddingLeft","paddingRight","side","type","AdornmentType","AdornmentSide","ADORNMENT_SIZE"],"mappings":"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","sourcesContent":["import type { Animated } from 'react-native';\nimport type { AdornmentConfig } from './Adornment/types';\nimport {\n  LABEL_PADDING_HORIZONTAL,\n  ADORNMENT_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  label?: string | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const refFontSize = scale * fontSize;\n  let result = pad;\n\n  if (height) {\n    return {\n      paddingTop: Math.max(0, (height - fontSize) / 2),\n      paddingBottom: Math.max(0, (height - fontSize) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontSize / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontSize * scale)\n            : Math.min(offset / 2, refFontSize * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight,\n}: {\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  affixHeight: number;\n}): number {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n\n  const halfOfTheInputHeightDecreasedByAffixHeight =\n    (inputHeightWithoutPadding - affixHeight) / 2;\n\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset,\n}: {\n  height: number;\n  affixHeight: number;\n  labelYOffset: number;\n}): number {\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig,\n}: {\n  adornmentConfig: AdornmentConfig[];\n}) => {\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n\n  adornmentConfig.forEach(({ type, side }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n\n  return { paddingLeft, paddingRight };\n};\n"]},"metadata":{},"sourceType":"module"}