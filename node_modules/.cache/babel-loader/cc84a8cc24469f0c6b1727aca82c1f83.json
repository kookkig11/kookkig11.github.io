{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Text as NativeText, StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming'; // @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\n\nconst Text = ({\n  style,\n  theme,\n  ...rest\n}, ref) => {\n  const root = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: args => {\n      var _root$current;\n\n      return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.setNativeProps(args);\n    }\n  }));\n  return /*#__PURE__*/React.createElement(NativeText, _extends({}, rest, {\n    ref: root,\n    style: [{ ...theme.fonts.regular,\n      color: theme.colors.text\n    }, styles.text, style]\n  }));\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme( /*#__PURE__*/React.forwardRef(Text));","map":{"version":3,"sources":["Text.tsx"],"names":["Text","rest","root","React","setNativeProps","args","theme","color","text","styles","textAlign","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SACEA,IAAI,IADN,UAAA,EAAA,UAAA,QAAA,cAAA;AAMA,SAAA,SAAA,QAAA,oBAAA,C,CAUA;;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMA,IAA6C,GAAG,CACpD;AAAA,EAAA,KAAA;AAAA,EAAA,KAAA;AAAgB,KAAGC;AAAnB,CADoD,EAAA,GAAA,KAGjD;AACH,QAAMC,IAAI,GAAGC,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb;AAEAA,EAAAA,KAAK,CAALA,mBAAAA,CAAAA,GAAAA,EAA+B,OAAO;AACpCC,IAAAA,cAAc,EAAGC,IAAD,IAAA;AAAA,UAAA,aAAA;;AAAA,aAAA,CAAA,aAAA,GAAkBH,IAAI,CAAtB,OAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAkBA,aAAAA,CAAAA,cAAAA,CAAlB,IAAkBA,CAAlB;AAAA;AADoB,GAAP,CAA/BC;AAIA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,GAAG,EAFL,IAAA;AAGE,IAAA,KAAK,EAAE,CACL,EACE,GAAGG,KAAK,CAALA,KAAAA,CADL,OAAA;AAEEC,MAAAA,KAAK,EAAED,KAAK,CAALA,MAAAA,CAAaE;AAFtB,KADK,EAKLC,MAAM,CALD,IAAA,EAAA,KAAA;AAHT,GAAA,CAAA,CADF;AAVF,CAAA;;AA0BA,MAAMA,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BD,EAAAA,IAAI,EAAE;AACJE,IAAAA,SAAS,EAAE;AADP;AADyB,CAAlB,CAAf;AAMA,eAAeC,SAAS,EAAA,aAACR,KAAK,CAALA,UAAAA,CAAzB,IAAyBA,CAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n// @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nconst Text: React.RefForwardingComponent<{}, Props> = (\n  { style, theme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  return (\n    <NativeText\n      {...rest}\n      ref={root}\n      style={[\n        {\n          ...theme.fonts.regular,\n          color: theme.colors.text,\n        },\n        styles.text,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(React.forwardRef(Text));\n"]},"metadata":{},"sourceType":"module"}