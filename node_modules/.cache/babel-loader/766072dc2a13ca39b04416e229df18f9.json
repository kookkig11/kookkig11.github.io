{"ast":null,"code":"import color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { useTheme } from '../../core/theming';\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nfunction MenuItem({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel\n}) {\n  const theme = useTheme();\n  const disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  const titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n  const iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n  return /*#__PURE__*/React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: onPress,\n    disabled: disabled,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"menuitem\",\n    accessibilityState: {\n      disabled\n    }\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.row\n  }, icon ? /*#__PURE__*/React.createElement(View, {\n    style: [styles.item, styles.icon],\n    pointerEvents: \"box-none\"\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: iconColor\n  })) : null, /*#__PURE__*/React.createElement(View, {\n    style: [styles.item, styles.content, icon ? styles.widthWithIcon : null, contentStyle],\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.title, {\n      color: titleColor\n    }, titleStyle]\n  }, title))));\n}\n\nMenuItem.displayName = 'Menu.Item';\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default MenuItem; // @component-docs ignore-next-line\n\nexport { MenuItem };","map":{"version":3,"sources":["MenuItem.tsx"],"names":["accessibilityLabel","theme","useTheme","disabledColor","color","titleColor","disabled","iconColor","styles","row","icon","MenuItem","minWidth","maxWidth","iconWidth","container","paddingHorizontal","height","justifyContent","flexDirection","width","title","fontSize","item","marginHorizontal","content","widthWithIcon"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { useTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nfunction MenuItem({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n}: Props) {\n  const theme = useTheme();\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n}\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default MenuItem;\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"module"}