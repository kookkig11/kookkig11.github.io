{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button';\nimport Icon from './Icon';\nimport { withTheme } from '../core/theming';\nimport shadow from '../styles/shadow';\nconst ELEVATION = 1;\nconst DEFAULT_MAX_WIDTH = 960;\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst Banner = ({\n  visible,\n  icon,\n  children,\n  actions,\n  contentStyle,\n  style,\n  theme,\n  ...rest\n}) => {\n  const {\n    current: position\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    measured: false\n  });\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    if (visible) {\n      // show\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false\n      }).start();\n    } else {\n      // hide\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [visible, position, scale]);\n\n  const handleLayout = ({\n    nativeEvent\n  }) => {\n    const {\n      height\n    } = nativeEvent.layout;\n    setLayout({\n      height,\n      measured: true\n    });\n  }; // The banner animation has 2 parts:\n  // 1. Blank spacer element which animates its height to move the content\n  // 2. Actual banner which animates its translateY\n  // In initial render, we position everything normally and measure the height of the banner\n  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n  // We need this because we need to move the content below as if banner's height was being animated\n  // However we can't animated banner's height directly as it'll also resize the content inside\n\n\n  const height = Animated.multiply(position, layout.height);\n  const translateY = Animated.multiply(Animated.add(position, -1), layout.height);\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    style: [styles.container, shadow(ELEVATION), style]\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [styles.wrapper, contentStyle]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: {\n      height\n    }\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    onLayout: handleLayout,\n    style: [layout.measured || !visible ? // If we have measured banner's height or it's invisible,\n    // Position it absolutely, the layout will be taken care of the spacer\n    [styles.absolute, {\n      transform: [{\n        translateY\n      }]\n    }] : // Otherwise position it normally\n    null, !layout.measured && !visible ? // If we haven't measured banner's height yet and it's invisible,\n    // hide it with opacity: 0 so user doesn't see it\n    {\n      opacity: 0\n    } : null]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.content\n  }, icon ? /*#__PURE__*/React.createElement(View, {\n    style: styles.icon\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 40\n  })) : null, /*#__PURE__*/React.createElement(Text, {\n    style: styles.message\n  }, children)), /*#__PURE__*/React.createElement(View, {\n    style: styles.actions\n  }, actions.map(({\n    label,\n    ...others\n  }, i) => /*#__PURE__*/React.createElement(Button, _extends({\n    key:\n    /* eslint-disable-line react/no-array-index-key */\n    i,\n    compact: true,\n    mode: \"text\",\n    style: styles.button\n  }, others), label))))));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION\n  },\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%'\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0\n  },\n  icon: {\n    margin: 8\n  },\n  message: {\n    flex: 1,\n    margin: 8\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4\n  },\n  button: {\n    margin: 4\n  }\n});\nexport default withTheme(Banner);","map":{"version":3,"sources":["Banner.tsx"],"names":["ELEVATION","DEFAULT_MAX_WIDTH","Banner","rest","current","position","React","Animated","visible","height","measured","scale","theme","duration","toValue","useNativeDriver","handleLayout","nativeEvent","setLayout","layout","translateY","styles","shadow","transform","opacity","content","icon","message","actions","others","button","container","elevation","wrapper","overflow","alignSelf","width","maxWidth","absolute","top","flexDirection","justifyContent","marginHorizontal","marginTop","marginBottom","margin","flex","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button';\nimport Icon, { IconSource } from './Icon';\nimport { withTheme } from '../core/theming';\nimport type { $RemoveChildren } from '../types';\nimport shadow from '../styles/shadow';\n\nconst ELEVATION = 1;\nconst DEFAULT_MAX_WIDTH = 960;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Whether banner is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Content that will be displayed inside banner.\n   */\n  children: string;\n  /**\n   * Icon to display for the `Banner`. Can be an image.\n   */\n  icon?: IconSource;\n  /**\n   * Action items to shown in the banner.\n   * An action item should contain the following properties:\n   *\n   * - `label`: label of the action button (required)\n   * - `onPress`: callback that is called when button is pressed (required)\n   *\n   * To customize button you can pass other props that button component takes.\n   */\n  actions: Array<{\n    label: string;\n    onPress: () => void;\n  }>;\n  /**\n   * Style of banner's inner content.\n   * Use this prop to apply custom width for wide layouts.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype NativeEvent = {\n  nativeEvent: {\n    layout: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  };\n};\n\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Banner = ({\n  visible,\n  icon,\n  children,\n  actions,\n  contentStyle,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: position } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    measured: boolean;\n  }>({\n    height: 0,\n    measured: false,\n  });\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      // hide\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [visible, position, scale]);\n\n  const handleLayout = ({ nativeEvent }: NativeEvent) => {\n    const { height } = nativeEvent.layout;\n    setLayout({ height, measured: true });\n  };\n\n  // The banner animation has 2 parts:\n  // 1. Blank spacer element which animates its height to move the content\n  // 2. Actual banner which animates its translateY\n  // In initial render, we position everything normally and measure the height of the banner\n  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n  // We need this because we need to move the content below as if banner's height was being animated\n  // However we can't animated banner's height directly as it'll also resize the content inside\n  const height = Animated.multiply(position, layout.height);\n\n  const translateY = Animated.multiply(\n    Animated.add(position, -1),\n    layout.height\n  );\n  return (\n    <Surface\n      {...rest}\n      style={[styles.container, shadow(ELEVATION) as ViewStyle, style]}\n    >\n      <View style={[styles.wrapper, contentStyle]}>\n        <Animated.View style={{ height }} />\n        <Animated.View\n          onLayout={handleLayout}\n          style={[\n            layout.measured || !visible\n              ? // If we have measured banner's height or it's invisible,\n                // Position it absolutely, the layout will be taken care of the spacer\n                [styles.absolute, { transform: [{ translateY }] }]\n              : // Otherwise position it normally\n                null,\n            !layout.measured && !visible\n              ? // If we haven't measured banner's height yet and it's invisible,\n                // hide it with opacity: 0 so user doesn't see it\n                { opacity: 0 }\n              : null,\n          ]}\n        >\n          <View style={styles.content}>\n            {icon ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={40} />\n              </View>\n            ) : null}\n            <Text style={styles.message}>{children}</Text>\n          </View>\n          <View style={styles.actions}>\n            {actions.map(({ label, ...others }, i) => (\n              <Button\n                key={/* eslint-disable-line react/no-array-index-key */ i}\n                compact\n                mode=\"text\"\n                style={styles.button}\n                {...others}\n              >\n                {label}\n              </Button>\n            ))}\n          </View>\n        </Animated.View>\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION,\n  },\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%',\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0,\n  },\n  icon: {\n    margin: 8,\n  },\n  message: {\n    flex: 1,\n    margin: 8,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4,\n  },\n  button: {\n    margin: 4,\n  },\n});\n\nexport default withTheme(Banner);\n"]},"metadata":{},"sourceType":"module"}