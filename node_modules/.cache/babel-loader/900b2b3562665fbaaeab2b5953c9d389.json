{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, TextInput, I18nManager } from 'react-native';\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\n\nconst Searchbar = /*#__PURE__*/React.forwardRef(({\n  clearAccessibilityLabel = 'clear',\n  clearIcon,\n  icon,\n  iconColor: customIconColor,\n  inputStyle,\n  onIconPress,\n  placeholder,\n  searchAccessibilityLabel = 'search',\n  style,\n  theme,\n  value,\n  ...rest\n}, ref) => {\n  const root = React.useRef(null);\n  React.useImperativeHandle(ref, () => {\n    const input = root.current;\n\n    if (input) {\n      return {\n        focus: () => input.focus(),\n        clear: () => input.clear(),\n        setNativeProps: args => input.setNativeProps(args),\n        isFocused: () => input.isFocused(),\n        blur: () => input.blur()\n      };\n    }\n\n    const noop = () => {\n      throw new Error('TextInput is not available');\n    };\n\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n\n  const handleClearPress = () => {\n    var _root$current, _rest$onChangeText;\n\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n\n  const {\n    colors,\n    roundness,\n    dark,\n    fonts\n  } = theme;\n  const textColor = colors.text;\n  const font = fonts.regular;\n  const iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  return /*#__PURE__*/React.createElement(Surface, {\n    style: [{\n      borderRadius: roundness,\n      elevation: 4\n    }, styles.container, style]\n  }, /*#__PURE__*/React.createElement(IconButton // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n  , {\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    color: iconColor,\n    icon: icon || (({\n      size,\n      color\n    }) => /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n      name: \"magnify\",\n      color: color,\n      size: size,\n      direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n    })),\n    accessibilityLabel: searchAccessibilityLabel\n  }), /*#__PURE__*/React.createElement(TextInput, _extends({\n    style: [styles.input, {\n      color: textColor,\n      ...font\n    }, inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: colors.placeholder,\n    selectionColor: colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light' // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: \"search\",\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value\n  }, rest)), /*#__PURE__*/React.createElement(IconButton, {\n    borderless: true,\n    disabled: !value,\n    accessibilityLabel: clearAccessibilityLabel,\n    color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || (({\n      size,\n      color\n    }) => /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n      name: \"close\",\n      color: color,\n      size: size,\n      direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n    })) // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\"\n  }));\n});\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","clearAccessibilityLabel","iconColor","searchAccessibilityLabel","rest","root","React","input","focus","clear","setNativeProps","args","isFocused","blur","noop","handleClearPress","fonts","textColor","colors","font","customIconColor","dark","color","rippleColor","borderRadius","elevation","styles","icon","I18nManager","placeholder","value","clearIcon","container","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}