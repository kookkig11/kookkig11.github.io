{"ast":null,"code":"import * as React from 'react';\nexport const ListAccordionGroupContext = /*#__PURE__*/React.createContext(null);\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children\n}) => {\n  const [expandedId, setExpandedId] = React.useState(undefined);\n\n  const onAccordionPressDefault = newExpandedId => {\n    setExpandedId(currentExpandedId => currentExpandedId === newExpandedId ? undefined : newExpandedId);\n  };\n\n  return /*#__PURE__*/React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      // component can be controlled or uncontrolled\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\nexport default ListAccordionGroup;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","children","onAccordionPressDefault","newExpandedId","setExpandedId","currentExpandedId","expandedIdProp","onAccordionPress"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAsBA,OAAO,MAAMA,yBAAyB,GAAA,aAAGC,KAAK,CAALA,aAAAA,CAAlC,IAAkCA,CAAlC;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,UAAU,EADgB,cAAA;AAAA,EAAA,gBAAA;AAG1BC,EAAAA;AAH0B,CAAD,KAId;AACX,QAAM,CAAA,UAAA,EAAA,aAAA,IAA8BH,KAAK,CAALA,QAAAA,CAApC,SAAoCA,CAApC;;AAIA,QAAMI,uBAAuB,GAAIC,aAAD,IAAoC;AAClEC,IAAAA,aAAa,CAAEC,iBAAD,IACZA,iBAAiB,KAAjBA,aAAAA,GAAAA,SAAAA,GADFD,aAAa,CAAbA;AADF,GAAA;;AAMA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,yBAAD,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,UAAU,EAAEM,cAAc,IADrB,UAAA;AACqC;AAC1CC,MAAAA,gBAAgB,EAAEA,gBAAgB,IAAIL;AAFjC;AADT,GAAA,EADF,QACE,CADF;AAfF,CAAA;;AA2BAH,kBAAkB,CAAlBA,WAAAA,GAAAA,qBAAAA;AAEA,eAAA,kBAAA","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"module"}