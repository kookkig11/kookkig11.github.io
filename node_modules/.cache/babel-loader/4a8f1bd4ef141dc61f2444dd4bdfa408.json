{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet, View, I18nManager } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst {\n  isRTL\n} = I18nManager;\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst ProgressBar = ({\n  color,\n  indeterminate,\n  style,\n  progress = 0,\n  visible = true,\n  theme,\n  ...rest\n}) => {\n  const {\n    current: timer\n  } = React.useRef(new Animated.Value(0));\n  const {\n    current: fade\n  } = React.useRef(new Animated.Value(0));\n  const [width, setWidth] = React.useState(0);\n  const [prevWidth, setPrevWidth] = React.useState(0);\n  const indeterminateAnimation = React.useRef(null);\n  const {\n    scale\n  } = theme.animation;\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start(); // Animate progress bar\n\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false\n        });\n      } // Reset timer to the beginning\n\n\n      timer.setValue(0);\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n  }, [fade, scale]);\n  React.useEffect(() => {\n    if (visible) startAnimation();else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = event => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors.primary;\n  const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n  return /*#__PURE__*/React.createElement(View, _extends({\n    onLayout: onLayout\n  }, rest, {\n    accessible: true,\n    accessibilityRole: \"progressbar\"\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, {\n      backgroundColor: trackTintColor,\n      opacity: fade\n    }, style]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.progressBar, {\n      backgroundColor: tintColor,\n      width,\n      transform: [{\n        translateX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n        })\n      }, {\n        // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n        scaleX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [0.0001, 1]\n        })\n      }]\n    }]\n  })));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","ProgressBar","progress","visible","rest","current","timer","React","Animated","fade","indeterminateAnimation","scale","theme","startAnimation","duration","toValue","useNativeDriver","isInteraction","Platform","stopAnimation","prevWidth","onLayout","event","setPrevWidth","setWidth","tintColor","color","trackTintColor","setColor","styles","backgroundColor","opacity","transform","translateX","indeterminate","inputRange","outputRange","scaleX","container","height","overflow","progressBar","flex","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,IAAA,EAAA,WAAA,QAAA,cAAA;AAUA,OAAA,QAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,iBAAA;AA0BA,MAAMA,sBAAsB,GAA5B,IAAA;AACA,MAAMC,uBAAuB,GAA7B,GAAA;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAN,WAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAA,EAAA,KAAA;AAAA,EAAA,aAAA;AAAA,EAAA,KAAA;AAInBC,EAAAA,QAAQ,GAJW,CAAA;AAKnBC,EAAAA,OAAO,GALY,IAAA;AAAA,EAAA,KAAA;AAOnB,KAAGC;AAPgB,CAAD,KAQP;AACX,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAAqBC,KAAK,CAALA,MAAAA,CACzB,IAAIC,QAAQ,CAAZ,KAAA,CADF,CACE,CADyBD,CAA3B;AAGA,QAAM;AAAEF,IAAAA,OAAO,EAAEI;AAAX,MAAoBF,KAAK,CAALA,MAAAA,CAA6B,IAAIC,QAAQ,CAAZ,KAAA,CAAvD,CAAuD,CAA7BD,CAA1B;AACA,QAAM,CAAA,KAAA,EAAA,QAAA,IAAoBA,KAAK,CAALA,QAAAA,CAA1B,CAA0BA,CAA1B;AACA,QAAM,CAAA,SAAA,EAAA,YAAA,IAA4BA,KAAK,CAALA,QAAAA,CAAlC,CAAkCA,CAAlC;AAEA,QAAMG,sBAAsB,GAAGH,KAAK,CAALA,MAAAA,CAA/B,IAA+BA,CAA/B;AAIA,QAAM;AAAEI,IAAAA;AAAF,MAAYC,KAAK,CAAvB,SAAA;AAEA,QAAMC,cAAc,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AAC7C;AACAL,IAAAA,QAAQ,CAARA,MAAAA,CAAAA,IAAAA,EAAsB;AACpBM,MAAAA,QAAQ,EAAE,MADU,KAAA;AAEpBC,MAAAA,OAAO,EAFa,CAAA;AAGpBC,MAAAA,eAAe,EAHK,IAAA;AAIpBC,MAAAA,aAAa,EAAE;AAJK,KAAtBT,EAF6C,KAE7CA,GAF6C,CAS7C;;AACA,QAAA,aAAA,EAAmB;AACjB,UAAI,CAACE,sBAAsB,CAA3B,OAAA,EAAqC;AACnCA,QAAAA,sBAAsB,CAAtBA,OAAAA,GAAiC,QAAQ,CAAR,MAAA,CAAA,KAAA,EAAuB;AACtDI,UAAAA,QAAQ,EAD8C,sBAAA;AAEtDC,UAAAA,OAAO,EAF+C,CAAA;AAGtD;AACAC,UAAAA,eAAe,EAAEE,QAAQ,CAARA,EAAAA,KAJqC,KAAA;AAKtDD,UAAAA,aAAa,EAAE;AALuC,SAAvB,CAAjCP;AAFe,OAAA,CAWjB;;;AACAJ,MAAAA,KAAK,CAALA,QAAAA,CAAAA,CAAAA;AAEAE,MAAAA,QAAQ,CAARA,IAAAA,CAAcE,sBAAsB,CAApCF,OAAAA,EAAAA,KAAAA;AAdF,KAAA,MAeO;AACLA,MAAAA,QAAQ,CAARA,MAAAA,CAAAA,KAAAA,EAAuB;AACrBM,QAAAA,QAAQ,EAAE,MADW,KAAA;AAErBC,QAAAA,OAAO,EAAEb,QAAQ,GAAA,QAAA,GAFI,CAAA;AAGrBc,QAAAA,eAAe,EAHM,IAAA;AAIrBC,QAAAA,aAAa,EAAE;AAJM,OAAvBT,EAAAA,KAAAA;AAMD;AAhCoB,GAAA,EAiCpB,CAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAjCH,IAiCG,CAjCoB,CAAvB;AAmCA,QAAMW,aAAa,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AAC5C;AACA,QAAIT,sBAAsB,CAA1B,OAAA,EAAoC;AAClCA,MAAAA,sBAAsB,CAAtBA,OAAAA,CAAAA,IAAAA;AACD;;AAEDF,IAAAA,QAAQ,CAARA,MAAAA,CAAAA,IAAAA,EAAsB;AACpBM,MAAAA,QAAQ,EAAE,MADU,KAAA;AAEpBC,MAAAA,OAAO,EAFa,CAAA;AAGpBC,MAAAA,eAAe,EAHK,IAAA;AAIpBC,MAAAA,aAAa,EAAE;AAJK,KAAtBT,EAAAA,KAAAA;AANoB,GAAA,EAYnB,CAAA,IAAA,EAZH,KAYG,CAZmB,CAAtB;AAcAD,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,QAAA,OAAA,EAAaM,cAAb,GAAA,KACKM,aAAa;AAFpBZ,GAAAA,EAGG,CAAA,OAAA,EAAA,cAAA,EAHHA,aAGG,CAHHA;AAKAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB;AACA,QAAIJ,OAAO,IAAIiB,SAAS,KAAxB,CAAA,EAAgC;AAC9BP,MAAAA,cAAc;AACf;AAJHN,GAAAA,EAKG,CAAA,SAAA,EAAA,cAAA,EALHA,OAKG,CALHA;;AAOA,QAAMc,QAAQ,GAAIC,KAAD,IAA8B;AAC7CC,IAAAA,YAAY,CAAZA,KAAY,CAAZA;AACAC,IAAAA,QAAQ,CAACF,KAAK,CAALA,WAAAA,CAAAA,MAAAA,CAATE,KAAQ,CAARA;AAFF,GAAA;;AAKA,QAAMC,SAAS,GAAGC,KAAK,IAAId,KAAK,CAALA,MAAAA,CAA3B,OAAA;AACA,QAAMe,cAAc,GAAGC,QAAQ,CAARA,SAAQ,CAARA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAvB,MAAuBA,EAAvB;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,QAAQ,EAAEP;AADZ,GAAA,EAAA,IAAA,EAAA;AAGE,IAAA,UAAU,EAHZ,IAAA;AAIE,IAAA,iBAAiB,EAAC;AAJpB,GAAA,CAAA,EAAA,aAME,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLQ,MAAM,CADD,SAAA,EAEL;AAAEC,MAAAA,eAAe,EAAjB,cAAA;AAAmCC,MAAAA,OAAO,EAAEtB;AAA5C,KAFK,EAAA,KAAA;AADT,GAAA,EAAA,aAOE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLoB,MAAM,CADD,WAAA,EAEL;AACEC,MAAAA,eAAe,EADjB,SAAA;AAAA,MAAA,KAAA;AAGEE,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,UAAU,EAAE,KAAK,CAAL,WAAA,CACVC,aAAa,GACT;AACEC,UAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,EADd,CACc,CADd;AAEEC,UAAAA,WAAW,EAAE,CACX,CAACpC,KAAK,GAAA,CAAA,GAAO,CAAb,CAAA,IAAA,GAAA,GADW,KAAA,EAEX,CAACA,KAAK,GAAA,CAAA,GAAO,CAAb,CAAA,IAAA,GAAA,GAAA,uBAAA,GAFW,KAAA,EAMX,CAACA,KAAK,GAAG,CAAH,CAAA,GAAN,CAAA,IAAA,GAAA,GANW,KAAA;AAFf,SADS,GAYT;AACEmC,UAAAA,UAAU,EAAE,CAAA,CAAA,EADd,CACc,CADd;AAEEC,UAAAA,WAAW,EAAE,CAAC,CAACpC,KAAK,GAAA,CAAA,GAAO,CAAb,CAAA,IAAA,GAAA,GAAD,KAAA,EAAA,CAAA;AAFf,SAbM;AADd,OADS,EAqBT;AACE;AACAqC,QAAAA,MAAM,EAAE,KAAK,CAAL,WAAA,CACNH,aAAa,GACT;AACEC,UAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,EADd,CACc,CADd;AAEEC,UAAAA,WAAW,EAAE,CAAA,MAAA,EAAA,uBAAA,EAAA,MAAA;AAFf,SADS,GAST;AACED,UAAAA,UAAU,EAAE,CAAA,CAAA,EADd,CACc,CADd;AAEEC,UAAAA,WAAW,EAAE,CAAA,MAAA,EAAA,CAAA;AAFf,SAVE;AAFV,OArBS;AAHb,KAFK;AADT,GAAA,CAPF,CANF,CADF;AA3FF,CAAA;;AA+JA,MAAMP,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BS,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EADG,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAM/BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE;AADK;AANkB,CAAlB,CAAf;AAWA,eAAeC,SAAS,CAAxB,WAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ProgressBar = ({\n  color,\n  indeterminate,\n  style,\n  progress = 0,\n  visible = true,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(0));\n  const [width, setWidth] = React.useState<number>(0);\n  const [prevWidth, setPrevWidth] = React.useState<number>(0);\n\n  const indeterminateAnimation = React.useRef<Animated.CompositeAnimation | null>(\n    null\n  );\n\n  const { scale } = theme.animation;\n\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }, [fade, scale]);\n\n  React.useEffect(() => {\n    if (visible) startAnimation();\n    else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors.primary;\n  const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n\n  return (\n    <View\n      onLayout={onLayout}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n    >\n      <Animated.View\n        style={[\n          styles.container,\n          { backgroundColor: trackTintColor, opacity: fade },\n          style,\n        ]}\n      >\n        <Animated.View\n          style={[\n            styles.progressBar,\n            {\n              backgroundColor: tintColor,\n              width,\n              transform: [\n                {\n                  translateX: timer.interpolate(\n                    indeterminate\n                      ? {\n                          inputRange: [0, 0.5, 1],\n                          outputRange: [\n                            (isRTL ? 1 : -1) * 0.5 * width,\n                            (isRTL ? 1 : -1) *\n                              0.5 *\n                              INDETERMINATE_MAX_WIDTH *\n                              width,\n                            (isRTL ? -1 : 1) * 0.7 * width,\n                          ],\n                        }\n                      : {\n                          inputRange: [0, 1],\n                          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                        }\n                  ),\n                },\n                {\n                  // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                  scaleX: timer.interpolate(\n                    indeterminate\n                      ? {\n                          inputRange: [0, 0.5, 1],\n                          outputRange: [\n                            0.0001,\n                            INDETERMINATE_MAX_WIDTH,\n                            0.0001,\n                          ],\n                        }\n                      : {\n                          inputRange: [0, 1],\n                          outputRange: [0.0001, 1],\n                        }\n                  ),\n                },\n              ],\n            },\n          ]}\n        />\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}