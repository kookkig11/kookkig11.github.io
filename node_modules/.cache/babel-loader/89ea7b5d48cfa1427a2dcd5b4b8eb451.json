{"ast":null,"code":"import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}) => {\n  const checkboxProps = { ...props,\n    status,\n    theme\n  };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = /*#__PURE__*/React.createElement(Checkbox, checkboxProps);\n  }\n\n  return /*#__PURE__*/React.createElement(TouchableRipple, {\n    onPress: onPress,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text\n    }, labelStyle]\n  }, label), checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem); // @component-docs ignore-next-line\n\nconst CheckboxItemWithTheme = withTheme(CheckboxItem); // @component-docs ignore-next-line\n\nexport { CheckboxItemWithTheme as CheckboxItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","props","checkboxProps","theme","mode","checkbox","testID","styles","color","text","withTheme","CheckboxItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize","flexShrink","flexGrow"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,UAAA,EAAA,IAAA,QAAA,cAAA;AAQA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,IAAA,MAAA,oBAAA;AACA,OAAA,eAAA,MAAA,oCAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,CAAC;AAAA,EAAA,KAAA;AAAA,EAAA,MAAA;AAAA,EAAA,KAAA;AAAA,EAAA,OAAA;AAAA,EAAA,UAAA;AAAA,EAAA,KAAA;AAAA,EAAA,MAAA;AAAA,EAAA,IAAA;AASpB,KAAGC;AATiB,CAAD,KAUR;AACX,QAAMC,aAAa,GAAG,EAAE,GAAF,KAAA;AAAA,IAAA,MAAA;AAAoBC,IAAAA;AAApB,GAAtB;AACA,MAAA,QAAA;;AAEA,MAAIC,IAAI,KAAR,SAAA,EAAwB;AACtBC,IAAAA,QAAQ,GAAA,aAAG,KAAA,CAAA,aAAA,CAAA,eAAA,EAAXA,aAAW,CAAXA;AADF,GAAA,MAEO,IAAID,IAAI,KAAR,KAAA,EAAoB;AACzBC,IAAAA,QAAQ,GAAA,aAAG,KAAA,CAAA,aAAA,CAAA,WAAA,EAAXA,aAAW,CAAXA;AADK,GAAA,MAEA;AACLA,IAAAA,QAAQ,GAAA,aAAG,KAAA,CAAA,aAAA,CAAA,QAAA,EAAXA,aAAW,CAAXA;AACD;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,IAAA,OAAO,EAAxB,OAAA;AAAmC,IAAA,MAAM,EAAEC;AAA3C,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EAAb,KAAa,CAAb;AAAwC,IAAA,aAAa,EAAC;AAAtD,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACA,MAAM,CAAP,KAAA,EAAe;AAAEC,MAAAA,KAAK,EAAEL,KAAK,CAALA,MAAAA,CAAaM;AAAtB,KAAf,EAAA,UAAA;AAAb,GAAA,EADF,KACE,CADF,EAFJ,QAEI,CADF,CADF;AAtBF,CAAA;;AAkCAT,YAAY,CAAZA,WAAAA,GAAAA,eAAAA;AAEA,eAAeU,SAAS,CAAxB,YAAwB,CAAxB,C,CAEA;;AACA,MAAMC,qBAAqB,GAAGD,SAAS,CAAvC,YAAuC,CAAvC,C,CACA;;AACA,SAASC,qBAAqB,IAA9B,YAAA;AAEA,MAAMJ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EADJ,KAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,eAAe,EAJN,CAAA;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,EAAA;AAELC,IAAAA,UAAU,EAFL,CAAA;AAGLC,IAAAA,QAAQ,EAAE;AAHL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\n          {label}\n        </Text>\n        {checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}