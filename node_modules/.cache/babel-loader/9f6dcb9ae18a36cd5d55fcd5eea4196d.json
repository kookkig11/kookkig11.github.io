{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\nconst defaultSize = 20;\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}) => {\n  const {\n    current: opacity\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  const isFirstRendering = React.useRef(true);\n  const {\n    animation: {\n      scale\n    }\n  } = theme;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [visible, opacity, scale]);\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = getContrastingColor(backgroundColor, white, black);\n  const borderRadius = size / 2;\n  return /*#__PURE__*/React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      opacity,\n      backgroundColor,\n      color: textColor,\n      fontSize: size * 0.5,\n      ...theme.fonts.regular,\n      lineHeight: size,\n      height: size,\n      minWidth: size,\n      borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n};\n\nexport default withTheme(Badge);\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","size","visible","rest","current","opacity","React","Animated","isFirstRendering","animation","scale","toValue","duration","useNativeDriver","backgroundColor","theme","restStyle","StyleSheet","textColor","getContrastingColor","borderRadius","color","fontSize","lineHeight","height","minWidth","styles","withTheme","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}