{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n/**\n * Portal host is the component which actually renders all Portals.\n */\n\nexport default class PortalManager extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      portals: []\n    });\n\n    _defineProperty(this, \"mount\", (key, children) => {\n      this.setState(state => ({\n        portals: [...state.portals, {\n          key,\n          children\n        }]\n      }));\n    });\n\n    _defineProperty(this, \"update\", (key, children) => this.setState(state => ({\n      portals: state.portals.map(item => {\n        if (item.key === key) {\n          return { ...item,\n            children\n          };\n        }\n\n        return item;\n      })\n    })));\n\n    _defineProperty(this, \"unmount\", key => this.setState(state => ({\n      portals: state.portals.filter(item => item.key !== key)\n    })));\n  }\n\n  render() {\n    return this.state.portals.map(({\n      key,\n      children\n    }) => /*#__PURE__*/React.createElement(View, {\n      key: key,\n      collapsable: false\n      /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n      ,\n      pointerEvents: \"box-none\",\n      style: StyleSheet.absoluteFill\n    }, children));\n  }\n\n}","map":{"version":3,"sources":["PortalManager.tsx"],"names":["React","portals","state","children","item","key","render","StyleSheet","absoluteFill"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,QAAA,cAAA;AASA;AACA;AACA;;AACA,eAAe,MAAA,aAAA,SAA4BA,KAAK,CAAjC,aAAA,CAA2D;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EACzD;AACbC,MAAAA,OAAO,EAAE;AADI,KADyD,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAKhE,CAAA,GAAA,EAAA,QAAA,KAA4C;AAClD,WAAA,QAAA,CAAeC,KAAD,KAAY;AACxBD,QAAAA,OAAO,EAAE,CAAC,GAAGC,KAAK,CAAT,OAAA,EAAmB;AAAA,UAAA,GAAA;AAAOC,UAAAA;AAAP,SAAnB;AADe,OAAZ,CAAd;AANsE,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAW/D,CAAA,GAAA,EAAA,QAAA,KACP,KAAA,QAAA,CAAeD,KAAD,KAAY;AACxBD,MAAAA,OAAO,EAAE,KAAK,CAAL,OAAA,CAAA,GAAA,CAAmBG,IAAD,IAAU;AACnC,YAAIA,IAAI,CAAJA,GAAAA,KAAJ,GAAA,EAAsB;AACpB,iBAAO,EAAE,GAAF,IAAA;AAAWD,YAAAA;AAAX,WAAP;AACD;;AACD,eAAA,IAAA;AAJO,OAAA;AADe,KAAZ,CAAd,CAZsE,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAqB7DE,GAAD,IACR,KAAA,QAAA,CAAeH,KAAD,KAAY;AACxBD,MAAAA,OAAO,EAAEC,KAAK,CAALA,OAAAA,CAAAA,MAAAA,CAAsBE,IAAD,IAAUA,IAAI,CAAJA,GAAAA,KAA/BF,GAAAA;AADe,KAAZ,CAAd,CAtBsE,CAAA;AAAA;;AA0BxEI,EAAAA,MAAM,GAAG;AACP,WAAO,KAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAuB,CAAC;AAAA,MAAA,GAAA;AAAOH,MAAAA;AAAP,KAAD,KAAA,aAC5B,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,GAAG,EADL,GAAA;AAEE,MAAA,WAAW,EACT;AAAM;AAHV;AAKE,MAAA,aAAa,EALf,UAAA;AAME,MAAA,KAAK,EAAEI,UAAU,CAACC;AANpB,KAAA,EADF,QACE,CADK,CAAP;AAYD;;AAvCuE","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number;\n    children: React.ReactNode;\n  }>;\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState((state) => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState((state) => ({\n      portals: state.portals.map((item) => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState((state) => ({\n      portals: state.portals.filter((item) => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}