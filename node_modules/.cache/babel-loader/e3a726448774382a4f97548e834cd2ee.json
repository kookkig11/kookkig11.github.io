{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nconst BORDER_WIDTH = 2;\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}) => {\n  const {\n    current: borderAnim\n  } = React.useRef(new Animated.Value(BORDER_WIDTH));\n  const {\n    current: radioAnim\n  } = React.useRef(new Animated.Value(1));\n  const isFirstRendering = React.useRef(true);\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor = rest.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  let rippleColor, radioColor;\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    const checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status,\n      value\n    }) === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : () => {\n        handlePress({\n          onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value\n        });\n      } // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      ,\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled,\n        checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: radioColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? /*#__PURE__*/React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: radioColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid); // @component-docs ignore-next-line\n\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid); // @component-docs ignore-next-line\n\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","rest","current","borderAnim","React","Animated","radioAnim","isFirstRendering","scale","theme","status","toValue","duration","useNativeDriver","checkedColor","uncheckedColor","color","context","checked","contextValue","value","rippleColor","radioColor","disabled","handlePress","onValueChange","styles","testID","borderColor","borderWidth","StyleSheet","backgroundColor","transform","container","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot","withTheme","RadioButtonAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}