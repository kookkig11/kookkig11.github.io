{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Animated, TouchableWithoutFeedback, View } from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardCover from './CardCover'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardTitle from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}) => {\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(cardElevation));\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: {\n        scale\n      }\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: {\n        scale\n      }\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  const {\n    roundness\n  } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type ? child.type.displayName : null);\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation\n    }, style]\n  }, rest), /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress ? handlePressIn : undefined,\n    onPressOut: onPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n    index,\n    total,\n    siblings\n  }) : child))));\n}; // @component ./CardContent.tsx\n\n\nCard.Content = CardContent; // @component ./CardActions.tsx\n\nCard.Actions = CardActions; // @component ./CardCover.tsx\n\nCard.Cover = CardCover; // @component ./CardTitle.tsx\n\nCard.Title = CardTitle;\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","rest","current","React","Animated","handlePressIn","animation","scale","toValue","duration","useNativeDriver","mode","handlePressOut","roundness","total","siblings","child","borderRadius","onPress","accessible","styles","innerContainer","flexGrow","flexShrink","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const { roundness } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  return (\n    <Surface style={[{ borderRadius: roundness, elevation }, style]} {...rest}>\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress ? handlePressIn : undefined}\n        onPressOut={onPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}