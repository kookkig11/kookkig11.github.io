{"ast":null,"code":"import { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\"; // Privates, ideally those should be symbols\n\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\nlet defaultTheme;\n\nconst resolveStyle = (style, baseStyle) => normalizeStyle(resolveIncludes(style, baseStyle));\n/**\n * The theme defines the application style, and provides methods to\n * resolve the style for a specific component.\n *\n * A theme style is a JavaScript object that contains the\n * React Native style rules, with several additional features:\n * 1. Style rules may be nested arbitrarily\n * 2. Top level keys may target specific components by using their fully qualified name\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\n *\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\n * {\n *   // Shared style\n *   baseFont: {\n *     fontFamily: '...'\n *   },\n *\n *   // Style that will be applied to shoutem.ui.Text component\n *   'shoutem.ui.Text': {\n *     [INCLUDE]: ['baseFont'],\n *     color: 'black'\n *   }\n * }\n */\n\n\nexport default class Theme {\n  constructor(themeStyle) {\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n  /**\n   * Sets the given style as a default theme style.\n   */\n\n\n  static setDefaultThemeStyle(style) {\n    defaultTheme = new Theme(style);\n  }\n  /**\n   * Returns the default theme that will be used as fallback\n   * if the StyleProvider is not configured in the app.\n   */\n\n\n  static getDefaultTheme() {\n    if (!defaultTheme) {\n      defaultTheme = new Theme({});\n    }\n\n    return defaultTheme;\n  }\n  /**\n   * Creates a component style by merging the theme style on top of the\n   * provided default component style. Any rules in the theme style will\n   * override the rules from the base component style.\n   *\n   * This method will also resolve any INCLUDE keywords in the theme or\n   * component styles before returning the final style.\n   *\n   * @param componentName fully qualified component name.\n   * @param defaultStyle - default component style that will be used as base style.\n   */\n\n\n  createComponentStyle(componentName, defaultStyle) {\n    if (this[THEME_STYLE_CACHE][componentName]) {\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n\n    const componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);\n    /**\n     * This is static component style (static per componentName). This style can only\n     * change if the theme changes during runtime, so it is safe to reuse it within a\n     * scope of a theme once it is resolved for the first time.\n     */\n\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);\n    return this[THEME_STYLE_CACHE][componentName];\n  }\n\n}\nexport const ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});","map":{"version":3,"sources":["/Users/kanitttha/comsci - year 4/covid-timeline/node_modules/native-base-shoutem-theme/src/Theme.js"],"names":["PropTypes","resolveIncludes","mergeComponentAndThemeStyles","normalizeStyle","THEME_STYLE","THEME_STYLE_CACHE","defaultTheme","resolveStyle","style","baseStyle","Theme","constructor","themeStyle","setDefaultThemeStyle","getDefaultTheme","createComponentStyle","componentName","defaultStyle","componentIncludedStyle","ThemeShape","shape","func","isRequired"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,4BAAP,MAAyC,gCAAzC;AACA,OAAOC,cAAP,MAA2B,kCAA3B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,4BAApB;AACA,MAAMC,iBAAiB,GAAG,kCAA1B;AAEA,IAAIC,YAAJ;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,SAAR,KACnBN,cAAc,CAACF,eAAe,CAACO,KAAD,EAAQC,SAAR,CAAhB,CADhB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,MAAMC,KAAN,CAAY;AACzBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,SAAKR,WAAL,IAAoBG,YAAY,CAACK,UAAD,CAAhC;AACA,SAAKP,iBAAL,IAA0B,EAA1B;AACD;AAED;AACF;AACA;;;AAC6B,SAApBQ,oBAAoB,CAACL,KAAD,EAAQ;AACjCF,IAAAA,YAAY,GAAG,IAAII,KAAJ,CAAUF,KAAV,CAAf;AACD;AAED;AACF;AACA;AACA;;;AACwB,SAAfM,eAAe,GAAG;AACvB,QAAI,CAACR,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAG,IAAII,KAAJ,CAAU,EAAV,CAAf;AACD;;AAED,WAAOJ,YAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACES,EAAAA,oBAAoB,CAACC,aAAD,EAAgBC,YAAhB,EAA8B;AAChD,QAAI,KAAKZ,iBAAL,EAAwBW,aAAxB,CAAJ,EAA4C;AAC1C,aAAO,KAAKX,iBAAL,EAAwBW,aAAxB,CAAP;AACD;;AAED,UAAME,sBAAsB,GAAGX,YAAY,CACzCU,YADyC,EAEzC,KAAKb,WAAL,CAFyC,CAA3C;AAKA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,iBAAL,EAAwBW,aAAxB,IAAyCd,4BAA4B,CACnEgB,sBADmE,EAEnE,KAAKd,WAAL,EAAkBY,aAAlB,CAFmE,EAGnE,KAAKZ,WAAL,CAHmE,CAArE;AAMA,WAAO,KAAKC,iBAAL,EAAwBW,aAAxB,CAAP;AACD;;AA1DwB;AA6D3B,OAAO,MAAMG,UAAU,GAAGnB,SAAS,CAACoB,KAAV,CAAgB;AACxCL,EAAAA,oBAAoB,EAAEf,SAAS,CAACqB,IAAV,CAAeC;AADG,CAAhB,CAAnB","sourcesContent":["import { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\n\n// Privates, ideally those should be symbols\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\n\nlet defaultTheme;\n\nconst resolveStyle = (style, baseStyle) =>\n  normalizeStyle(resolveIncludes(style, baseStyle));\n\n/**\n * The theme defines the application style, and provides methods to\n * resolve the style for a specific component.\n *\n * A theme style is a JavaScript object that contains the\n * React Native style rules, with several additional features:\n * 1. Style rules may be nested arbitrarily\n * 2. Top level keys may target specific components by using their fully qualified name\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\n *\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\n * {\n *   // Shared style\n *   baseFont: {\n *     fontFamily: '...'\n *   },\n *\n *   // Style that will be applied to shoutem.ui.Text component\n *   'shoutem.ui.Text': {\n *     [INCLUDE]: ['baseFont'],\n *     color: 'black'\n *   }\n * }\n */\nexport default class Theme {\n  constructor(themeStyle) {\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n\n  /**\n   * Sets the given style as a default theme style.\n   */\n  static setDefaultThemeStyle(style) {\n    defaultTheme = new Theme(style);\n  }\n\n  /**\n   * Returns the default theme that will be used as fallback\n   * if the StyleProvider is not configured in the app.\n   */\n  static getDefaultTheme() {\n    if (!defaultTheme) {\n      defaultTheme = new Theme({});\n    }\n\n    return defaultTheme;\n  }\n\n  /**\n   * Creates a component style by merging the theme style on top of the\n   * provided default component style. Any rules in the theme style will\n   * override the rules from the base component style.\n   *\n   * This method will also resolve any INCLUDE keywords in the theme or\n   * component styles before returning the final style.\n   *\n   * @param componentName fully qualified component name.\n   * @param defaultStyle - default component style that will be used as base style.\n   */\n  createComponentStyle(componentName, defaultStyle) {\n    if (this[THEME_STYLE_CACHE][componentName]) {\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n\n    const componentIncludedStyle = resolveStyle(\n      defaultStyle,\n      this[THEME_STYLE]\n    );\n\n    /**\n     * This is static component style (static per componentName). This style can only\n     * change if the theme changes during runtime, so it is safe to reuse it within a\n     * scope of a theme once it is resolved for the first time.\n     */\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(\n      componentIncludedStyle,\n      this[THEME_STYLE][componentName],\n      this[THEME_STYLE]\n    );\n\n    return this[THEME_STYLE_CACHE][componentName];\n  }\n}\n\nexport const ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});\n"]},"metadata":{},"sourceType":"module"}