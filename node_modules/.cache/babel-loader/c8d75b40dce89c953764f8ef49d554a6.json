{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\n\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}) => {\n  const borderRadius = theme.roundness;\n  return /*#__PURE__*/React.createElement(ToggleButtonGroupContext.Consumer, null, context => {\n    let backgroundColor;\n    const checked = context && context.value === value || status === 'checked';\n\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    return /*#__PURE__*/React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: e => {\n        if (onPress) {\n          onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor,\n        borderRadius,\n        borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton); // @component-docs ignore-next-line\n\nconst ToggleButtonWithTheme = withTheme(ToggleButton); // @component-docs ignore-next-line\n\nexport { ToggleButtonWithTheme as ToggleButton };","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","rest","borderRadius","theme","context","checked","status","backgroundColor","e","onPress","selected","styles","borderColor","color","content","width","height","margin","withTheme","ToggleButtonWithTheme"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,QAAA,cAAA;AAMA,SAAA,SAAA,QAAA,oBAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,eAAA;AACA,SAAA,wBAAA,QAAA,qBAAA;AACA,SAAA,KAAA,EAAA,KAAA,QAAA,qBAAA;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,YAAY,GAAG,CAAC;AAAA,EAAA,IAAA;AAAA,EAAA,IAAA;AAAA,EAAA,KAAA;AAAA,EAAA,kBAAA;AAAA,EAAA,QAAA;AAAA,EAAA,KAAA;AAAA,EAAA,KAAA;AAAA,EAAA,MAAA;AAAA,EAAA,OAAA;AAUpB,KAAGC;AAViB,CAAD,KAWR;AACX,QAAMC,YAAY,GAAGC,KAAK,CAA1B,SAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA,IAAA,EACIC,OAAD,IAAuE;AACtE,QAAA,eAAA;AAEA,UAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAAPA,KAAAA,KAAZ,KAACA,IAAuCE,MAAM,KADhD,SAAA;;AAGA,QAAA,OAAA,EAAa;AACXC,MAAAA,eAAe,GAAGJ,KAAK,CAALA,IAAAA,GAAAA,0BAAAA,GAAlBI,oBAAAA;AADF,KAAA,MAIO;AACLA,MAAAA,eAAe,GAAfA,aAAAA;AACD;;AAED,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AACE,MAAA,UAAU,EADZ,KAAA;AAEE,MAAA,IAAI,EAFN,IAAA;AAGE,MAAA,OAAO,EAAGC,CAAD,IAAwC;AAC/C,YAAA,OAAA,EAAa;AACXC,UAAAA,OAAO,CAAPA,CAAO,CAAPA;AACD;;AAED,YAAA,OAAA,EAAa;AACXL,UAAAA,OAAO,CAAPA,aAAAA,CAAsB,CAAA,OAAA,GAAA,KAAA,GAAtBA,IAAAA;AACD;AAVL,OAAA;AAYE,MAAA,IAAI,EAZN,IAAA;AAaE,MAAA,kBAAkB,EAbpB,kBAAA;AAcE,MAAA,kBAAkB,EAAE;AAAA,QAAA,QAAA;AAAYM,QAAAA,QAAQ,EAAEL;AAAtB,OAdtB;AAeE,MAAA,QAAQ,EAfV,QAAA;AAgBE,MAAA,KAAK,EAAE,CACLM,MAAM,CADD,OAAA,EAEL;AAAA,QAAA,eAAA;AAAA,QAAA,YAAA;AAGEC,QAAAA,WAAW,EAAEC,KAAK,CAACV,KAAK,CAALA,IAAAA,GAAAA,KAAAA,GAANU,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAAA,MAAAA;AAHf,OAFK,EAAA,KAAA;AAhBT,KAAA,EADF,IACE,CAAA,CADF;AAhBN,GACE,CADF;AAdF,CAAA;;AAmEA,MAAMF,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EADE,EAAA;AAEPC,IAAAA,MAAM,EAFC,EAAA;AAGPC,IAAAA,MAAM,EAAE;AAHD;AADsB,CAAlB,CAAf;AAQA,eAAeC,SAAS,CAAxB,YAAwB,CAAxB,C,CAEA;;AACA,MAAMC,qBAAqB,GAAGD,SAAS,CAAvC,YAAuC,CAAvC,C,CACA;;AACA,SAASC,qBAAqB,IAA9B,YAAA","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"module"}