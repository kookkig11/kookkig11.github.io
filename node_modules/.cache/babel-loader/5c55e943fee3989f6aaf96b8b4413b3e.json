{"ast":null,"code":"import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport DialogTitle from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\nconst DIALOG_ELEVATION = 24;\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme\n}) => /*#__PURE__*/React.createElement(Modal, {\n  dismissable: dismissable,\n  onDismiss: onDismiss,\n  visible: visible,\n  contentContainerStyle: [{\n    borderRadius: theme.roundness,\n    backgroundColor: theme.dark && theme.mode === 'adaptive' ? overlay(DIALOG_ELEVATION, theme.colors.surface) : theme.colors.surface\n  }, styles.container, style]\n}, React.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').map((child, i) => {\n  if (i === 0 && /*#__PURE__*/React.isValidElement(child) && child.type === DialogContent) {\n    // Dialog content is the first item, so we add a top padding\n    return /*#__PURE__*/React.cloneElement(child, {\n      style: [{\n        paddingTop: 24\n      }, child.props.style]\n    });\n  }\n\n  return child;\n})); // @component ./DialogContent.tsx\n\n\nDialog.Content = DialogContent; // @component ./DialogActions.tsx\n\nDialog.Actions = DialogActions; // @component ./DialogTitle.tsx\n\nDialog.Title = DialogTitle; // @component ./DialogScrollArea.tsx\n\nDialog.ScrollArea = DialogScrollArea;\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"sources":["Dialog.tsx"],"names":["DIALOG_ELEVATION","Dialog","dismissable","visible","theme","borderRadius","backgroundColor","overlay","surface","styles","child","i","React","style","paddingTop","container","marginVertical","Platform","marginHorizontal","elevation","justifyContent","withTheme"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,QAAA,QAAA,cAAA;AACA,OAAA,KAAA,MAAA,UAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,aAAA,MAAA,iBAAA,C,CACA;;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AACA,OAAA,OAAA,MAAA,sBAAA;AA0BA,MAAMA,gBAAwB,GAA9B,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,CAAC;AAAA,EAAA,QAAA;AAEdC,EAAAA,WAAW,GAFG,IAAA;AAAA,EAAA,SAAA;AAIdC,EAAAA,OAAO,GAJO,KAAA;AAAA,EAAA,KAAA;AAMdC,EAAAA;AANc,CAAD,KAAA,aAQb,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,EAAA,WAAW,EADb,WAAA;AAEE,EAAA,SAAS,EAFX,SAAA;AAGE,EAAA,OAAO,EAHT,OAAA;AAIE,EAAA,qBAAqB,EAAE,CACrB;AACEC,IAAAA,YAAY,EAAED,KAAK,CADrB,SAAA;AAEEE,IAAAA,eAAe,EACbF,KAAK,CAALA,IAAAA,IAAcA,KAAK,CAALA,IAAAA,KAAdA,UAAAA,GACIG,OAAO,CAAA,gBAAA,EAAmBH,KAAK,CAALA,MAAAA,CAD9BA,OACW,CADXA,GAEIA,KAAK,CAALA,MAAAA,CAAaI;AALrB,GADqB,EAQrBC,MAAM,CARe,SAAA,EAAA,KAAA;AAJzB,CAAA,EAgBG,KAAK,CAAL,QAAA,CAAA,OAAA,CAAA,QAAA,EAAA,MAAA,CACUC,KAAD,IAAWA,KAAK,IAALA,IAAAA,IAAiB,OAAA,KAAA,KADrC,SAAA,EAAA,GAAA,CAEM,CAAA,KAAA,EAAA,CAAA,KAAc;AACjB,MACEC,CAAC,KAADA,CAAAA,IAAAA,aACAC,KAAK,CAALA,cAAAA,CADAD,KACAC,CADAD,IAEAD,KAAK,CAALA,IAAAA,KAHF,aAAA,EAIE;AACA;AACA,WAAA,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BG,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAD,EAAqBJ,KAAK,CAALA,KAAAA,CAArB,KAAA;AADwB,KAA1B,CAAP;AAGD;;AAED,SAAA,KAAA;AAtCR,CAwBK,CAhBH,CARF,C,CA2CA;;;AACAT,MAAM,CAANA,OAAAA,GAAAA,aAAAA,C,CACA;;AACAA,MAAM,CAANA,OAAAA,GAAAA,aAAAA,C,CACA;;AACAA,MAAM,CAANA,KAAAA,GAAAA,WAAAA,C,CACA;;AACAA,MAAM,CAANA,UAAAA,GAAAA,gBAAAA;AAEA,MAAMQ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BM,EAAAA,SAAS,EAAE;AACT;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAEC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,GAAAA,EAAAA,GARP,CAAA;AASTC,IAAAA,gBAAgB,EATP,EAAA;AAUTC,IAAAA,SAAS,EAVA,gBAAA;AAWTC,IAAAA,cAAc,EAAE;AAXP;AADoB,CAAlB,CAAf;AAgBA,eAAeC,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}