{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, BackHandler, Easing, StyleSheet, TouchableWithoutFeedback, View } from 'react-native';\nimport { getStatusBarHeight, getBottomSpace } from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass Modal extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      opacity: new Animated.Value(this.props.visible ? 1 : 0),\n      rendered: this.props.visible\n    });\n\n    _defineProperty(this, \"handleBack\", () => {\n      if (this.props.dismissable) {\n        this.hideModal();\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"showModal\", () => {\n      BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n      BackHandler.addEventListener('hardwareBackPress', this.handleBack);\n      const {\n        opacity\n      } = this.state;\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: scale * DEFAULT_DURATION,\n        easing: Easing.out(Easing.cubic),\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"hideModal\", () => {\n      BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n      const {\n        opacity\n      } = this.state;\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: scale * DEFAULT_DURATION,\n        easing: Easing.out(Easing.cubic),\n        useNativeDriver: true\n      }).start(({\n        finished\n      }) => {\n        if (!finished) {\n          return;\n        }\n\n        if (this.props.visible && this.props.onDismiss) {\n          this.props.onDismiss();\n        }\n\n        if (this.props.visible) {\n          this.showModal();\n        } else {\n          this.setState({\n            rendered: false\n          });\n        }\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.hideModal();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n  }\n\n  render() {\n    const {\n      rendered,\n      opacity\n    } = this.state;\n    if (!rendered) return null;\n    const {\n      children,\n      dismissable,\n      style,\n      theme,\n      contentContainerStyle,\n      overlayAccessibilityLabel\n    } = this.props;\n    const {\n      colors\n    } = theme;\n    return /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: this.props.visible ? 'auto' : 'none',\n      accessibilityViewIsModal: true,\n      accessibilityLiveRegion: \"polite\",\n      style: StyleSheet.absoluteFill,\n      onAccessibilityEscape: this.hideModal\n    }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n      accessibilityLabel: overlayAccessibilityLabel,\n      accessibilityRole: \"button\",\n      disabled: !dismissable,\n      onPress: dismissable ? this.hideModal : undefined\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.backdrop, {\n        backgroundColor: colors.backdrop,\n        opacity\n      }]\n    })), /*#__PURE__*/React.createElement(View, {\n      style: [styles.wrapper, {\n        marginTop: TOP_INSET,\n        marginBottom: BOTTOM_INSET\n      }, style],\n      pointerEvents: \"box-none\"\n    }, /*#__PURE__*/React.createElement(Surface, {\n      style: [{\n        opacity\n      }, styles.content, contentContainerStyle]\n    }, children)));\n  }\n\n}\n\n_defineProperty(Modal, \"defaultProps\", {\n  dismissable: true,\n  visible: false,\n  overlayAccessibilityLabel: 'Close modal'\n});\n\nexport default withTheme(Modal);\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: { ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center'\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["Modal.tsx"],"names":["DEFAULT_DURATION","TOP_INSET","getStatusBarHeight","BOTTOM_INSET","getBottomSpace","Modal","React","dismissable","visible","overlayAccessibilityLabel","getDerivedStateFromProps","nextProps","prevState","rendered","opacity","Animated","componentDidUpdate","prevProps","BackHandler","scale","toValue","duration","easing","Easing","useNativeDriver","finished","componentWillUnmount","render","colors","StyleSheet","hideModal","undefined","styles","backgroundColor","marginTop","marginBottom","withTheme","backdrop","flex","wrapper","justifyContent","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n    overlayAccessibilityLabel: 'Close modal',\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.hideModal();\n      }\n    }\n  }\n\n  private handleBack = () => {\n    if (this.props.dismissable) {\n      this.hideModal();\n    }\n    return true;\n  };\n\n  private showModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n  }\n\n  render() {\n    const { rendered, opacity } = this.state;\n\n    if (!rendered) return null;\n\n    const {\n      children,\n      dismissable,\n      style,\n      theme,\n      contentContainerStyle,\n      overlayAccessibilityLabel,\n    } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n        onAccessibilityEscape={this.hideModal}\n      >\n        <TouchableWithoutFeedback\n          accessibilityLabel={overlayAccessibilityLabel}\n          accessibilityRole=\"button\"\n          disabled={!dismissable}\n          onPress={dismissable ? this.hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <View\n          style={[\n            styles.wrapper,\n            { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n            style,\n          ]}\n          pointerEvents=\"box-none\"\n        >\n          <Surface\n            style={\n              [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n                ViewStyle\n              >\n            }\n          >\n            {children}\n          </Surface>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}