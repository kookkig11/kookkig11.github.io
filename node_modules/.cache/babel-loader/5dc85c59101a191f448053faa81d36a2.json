{"ast":null,"code":"import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport Icon, { isValidIcon, isEqualIcon } from './Icon';\nimport { withTheme } from '../core/theming';\n\nconst CrossFadeIcon = ({\n  color,\n  size,\n  source,\n  theme\n}) => {\n  const [currentIcon, setCurrentIcon] = React.useState(() => source);\n  const [previousIcon, setPreviousIcon] = React.useState(null);\n  const {\n    current: fade\n  } = React.useRef(new Animated.Value(1));\n  const {\n    scale\n  } = theme.animation;\n\n  if (currentIcon !== source) {\n    setPreviousIcon(() => currentIcon);\n    setCurrentIcon(() => source);\n  }\n\n  React.useEffect(() => {\n    if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {\n      fade.setValue(1);\n      Animated.timing(fade, {\n        duration: scale * 200,\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [currentIcon, previousIcon, fade, scale]);\n  const opacityPrev = fade;\n  const opacityNext = previousIcon ? fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 0]\n  }) : 1;\n  const rotatePrev = fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['-90deg', '0deg']\n  });\n  const rotateNext = previousIcon ? fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '-180deg']\n  }) : '0deg';\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, {\n      height: size,\n      width: size\n    }]\n  }, previousIcon ? /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.icon, {\n      opacity: opacityPrev,\n      transform: [{\n        rotate: rotatePrev\n      }]\n    }]\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: previousIcon,\n    size: size,\n    color: color\n  })) : null, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.icon, {\n      opacity: opacityNext,\n      transform: [{\n        rotate: rotateNext\n      }]\n    }]\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: currentIcon,\n    size: size,\n    color: color\n  })));\n};\n\nexport default withTheme(CrossFadeIcon);\nconst styles = StyleSheet.create({\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["CrossFadeIcon.tsx"],"names":["CrossFadeIcon","theme","React","current","fade","Animated","scale","currentIcon","setPreviousIcon","setCurrentIcon","isValidIcon","isEqualIcon","duration","toValue","useNativeDriver","opacityPrev","opacityNext","previousIcon","inputRange","outputRange","rotatePrev","rotateNext","styles","height","width","size","opacity","transform","rotate","color","withTheme","content","alignItems","justifyContent","icon","position","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport Icon, { isValidIcon, IconSource, isEqualIcon } from './Icon';\n\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Icon to display for the `CrossFadeIcon`.\n   */\n  source: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color: string;\n  /**\n   * Size of the icon.\n   */\n  size: number;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst CrossFadeIcon = ({ color, size, source, theme }: Props) => {\n  const [currentIcon, setCurrentIcon] = React.useState<IconSource>(\n    () => source\n  );\n  const [previousIcon, setPreviousIcon] = React.useState<IconSource | null>(\n    null\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(1));\n\n  const { scale } = theme.animation;\n\n  if (currentIcon !== source) {\n    setPreviousIcon(() => currentIcon);\n    setCurrentIcon(() => source);\n  }\n\n  React.useEffect(() => {\n    if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {\n      fade.setValue(1);\n\n      Animated.timing(fade, {\n        duration: scale * 200,\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [currentIcon, previousIcon, fade, scale]);\n\n  const opacityPrev = fade;\n  const opacityNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      })\n    : 1;\n\n  const rotatePrev = fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['-90deg', '0deg'],\n  });\n\n  const rotateNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['0deg', '-180deg'],\n      })\n    : '0deg';\n\n  return (\n    <View\n      style={[\n        styles.content,\n        {\n          height: size,\n          width: size,\n        },\n      ]}\n    >\n      {previousIcon ? (\n        <Animated.View\n          style={[\n            styles.icon,\n            {\n              opacity: opacityPrev,\n              transform: [{ rotate: rotatePrev }],\n            },\n          ]}\n        >\n          <Icon source={previousIcon} size={size} color={color} />\n        </Animated.View>\n      ) : null}\n      <Animated.View\n        style={[\n          styles.icon,\n          {\n            opacity: opacityNext,\n            transform: [{ rotate: rotateNext }],\n          },\n        ]}\n      >\n        <Icon source={currentIcon} size={size} color={color} />\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default withTheme(CrossFadeIcon);\n\nconst styles = StyleSheet.create({\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}