{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View, SafeAreaView } from 'react-native';\nimport overlay from '../../styles/overlay';\nimport { DEFAULT_APPBAR_HEIGHT, Appbar } from './Appbar';\nimport shadow from '../../styles/shadow';\nimport { withTheme } from '../../core/theming';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.android.png\" />\n *     <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.ios.png\" />\n *     <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const _goBack = () => console.log('Went back');\n *\n *   const _handleSearch = () => console.log('Searching');\n *\n *   const _handleMore = () => console.log('Shown more');\n *\n *   return (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={_goBack} />\n *       <Appbar.Content title=\"Title\" subtitle=\"Subtitle\" />\n *       <Appbar.Action icon=\"magnify\" onPress={_handleSearch} />\n *       <Appbar.Action icon=\"dots-vertical\" onPress={_handleMore} />\n *     </Appbar.Header>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst AppbarHeader = props => {\n  const {\n    // Don't use default props since we check it to know whether we should use SafeAreaView\n    statusBarHeight = APPROX_STATUSBAR_HEIGHT,\n    style,\n    dark,\n    ...rest\n  } = props;\n  const {\n    dark: isDarkTheme,\n    colors,\n    mode\n  } = rest.theme;\n  const {\n    height = DEFAULT_APPBAR_HEIGHT,\n    elevation = 4,\n    backgroundColor: customBackground,\n    zIndex = 0,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary; // Let the user override the behaviour\n\n  const Wrapper = typeof props.statusBarHeight === 'number' ? View : SafeAreaView;\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    style: [{\n      backgroundColor,\n      zIndex,\n      elevation\n    }, shadow(elevation)]\n  }, /*#__PURE__*/React.createElement(Appbar, _extends({\n    style: [{\n      height,\n      backgroundColor,\n      marginTop: statusBarHeight\n    }, styles.appbar, restStyle],\n    dark: dark\n  }, rest)));\n};\n\nAppbarHeader.displayName = 'Appbar.Header';\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0\n  }\n});\nexport default withTheme(AppbarHeader); // @component-docs ignore-next-line\n\nconst AppbarHeaderWithTheme = withTheme(AppbarHeader); // @component-docs ignore-next-line\n\nexport { AppbarHeaderWithTheme as AppbarHeader };","map":{"version":3,"sources":["AppbarHeader.tsx"],"names":["AppbarHeader","props","statusBarHeight","rest","dark","mode","height","elevation","backgroundColor","zIndex","restStyle","StyleSheet","customBackground","isDarkTheme","overlay","colors","Wrapper","shadow","marginTop","styles","appbar","withTheme","AppbarHeaderWithTheme"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,IAAA,EAAA,YAAA,QAAA,cAAA;AAOA,OAAA,OAAA,MAAA,sBAAA;AACA,SAAA,qBAAA,EAAA,MAAA,QAAA,UAAA;AACA,OAAA,MAAA,MAAA,qBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,uBAAA,QAAA,iBAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,YAAY,GAAIC,KAAD,IAAkB;AACrC,QAAM;AACJ;AACAC,IAAAA,eAAe,GAFX,uBAAA;AAAA,IAAA,KAAA;AAAA,IAAA,IAAA;AAKJ,OAAGC;AALC,MAAN,KAAA;AAQA,QAAM;AAAEC,IAAAA,IAAI,EAAN,WAAA;AAAA,IAAA,MAAA;AAA6BC,IAAAA;AAA7B,MAAsCF,IAAI,CAAhD,KAAA;AACA,QAAM;AACJG,IAAAA,MAAM,GADF,qBAAA;AAEJC,IAAAA,SAAS,GAFL,CAAA;AAGJC,IAAAA,eAAe,EAHX,gBAAA;AAIJC,IAAAA,MAAM,GAJF,CAAA;AAKJ,OAAGC;AALC,MAMSC,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KANf,EAAA;AAOA,QAAMH,eAAe,GAAGI,gBAAgB,GAAA,gBAAA,GAEpCC,WAAW,IAAIR,IAAI,KAAnBQ,UAAAA,GACAC,OAAO,CAAA,SAAA,EAAYC,MAAM,CADzBF,OACO,CADPA,GAEAE,MAAM,CArB2B,OAiBrC,CAjBqC,CAsBrC;;AACA,QAAMC,OAAO,GACX,OAAOf,KAAK,CAAZ,eAAA,KAAA,QAAA,GAAA,IAAA,GADF,YAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,IAAA,KAAK,EACH,CACE;AAAA,MAAA,eAAA;AAAA,MAAA,MAAA;AAA2BM,MAAAA;AAA3B,KADF,EAEEU,MAAM,CAFR,SAEQ,CAFR;AAFJ,GAAA,EAAA,aAQE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EAAE,CACL;AAAA,MAAA,MAAA;AAAA,MAAA,eAAA;AAA2BC,MAAAA,SAAS,EAAEhB;AAAtC,KADK,EAELiB,MAAM,CAFD,MAAA,EADT,SACS,CADT;AAME,IAAA,IAAI,EAAEf;AANR,GAAA,EATJ,IASI,CAAA,CARF,CADF;AAzBF,CAAA;;AA+CAJ,YAAY,CAAZA,WAAAA,GAAAA,eAAAA;AAEA,MAAMmB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,MAAM,EAAE;AACNb,IAAAA,SAAS,EAAE;AADL;AADuB,CAAlB,CAAf;AAMA,eAAec,SAAS,CAAxB,YAAwB,CAAxB,C,CAEA;;AACA,MAAMC,qBAAqB,GAAGD,SAAS,CAAvC,YAAuC,CAAvC,C,CACA;;AACA,SAASC,qBAAqB,IAA9B,YAAA","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  SafeAreaView,\n  ViewStyle,\n} from 'react-native';\nimport overlay from '../../styles/overlay';\nimport { DEFAULT_APPBAR_HEIGHT, Appbar } from './Appbar';\nimport shadow from '../../styles/shadow';\nimport { withTheme } from '../../core/theming';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\n\ntype Props = React.ComponentProps<typeof Appbar> & {\n  /**\n   * Whether the background color is a dark color. A dark header will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Extra padding to add at the top of header to account for translucent status bar.\n   * This is automatically handled on iOS >= 11 including iPhone X using `SafeAreaView`.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to disable the default behaviour, and customize the height.\n   */\n  statusBarHeight?: number;\n  /**\n   * Content of the header.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.android.png\" />\n *     <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.ios.png\" />\n *     <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const _goBack = () => console.log('Went back');\n *\n *   const _handleSearch = () => console.log('Searching');\n *\n *   const _handleMore = () => console.log('Shown more');\n *\n *   return (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={_goBack} />\n *       <Appbar.Content title=\"Title\" subtitle=\"Subtitle\" />\n *       <Appbar.Action icon=\"magnify\" onPress={_handleSearch} />\n *       <Appbar.Action icon=\"dots-vertical\" onPress={_handleMore} />\n *     </Appbar.Header>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarHeader = (props: Props) => {\n  const {\n    // Don't use default props since we check it to know whether we should use SafeAreaView\n    statusBarHeight = APPROX_STATUSBAR_HEIGHT,\n    style,\n    dark,\n    ...rest\n  } = props;\n\n  const { dark: isDarkTheme, colors, mode } = rest.theme;\n  const {\n    height = DEFAULT_APPBAR_HEIGHT,\n    elevation = 4,\n    backgroundColor: customBackground,\n    zIndex = 0,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n  // Let the user override the behaviour\n  const Wrapper =\n    typeof props.statusBarHeight === 'number' ? View : SafeAreaView;\n  return (\n    <Wrapper\n      style={\n        [\n          { backgroundColor, zIndex, elevation },\n          shadow(elevation),\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Appbar\n        style={[\n          { height, backgroundColor, marginTop: statusBarHeight },\n          styles.appbar,\n          restStyle,\n        ]}\n        dark={dark}\n        {...rest}\n      />\n    </Wrapper>\n  );\n};\n\nAppbarHeader.displayName = 'Appbar.Header';\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(AppbarHeader);\n\n// @component-docs ignore-next-line\nconst AppbarHeaderWithTheme = withTheme(AppbarHeader);\n// @component-docs ignore-next-line\nexport { AppbarHeaderWithTheme as AppbarHeader };\n"]},"metadata":{},"sourceType":"module"}