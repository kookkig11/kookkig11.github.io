{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Text, Platform } from 'react-native';\nlet MaterialCommunityIcons;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons').default;\n} catch (e) {\n  let isErrorLogged = false; // Fallback component for icons\n\n  MaterialCommunityIcons = ({\n    name,\n    color,\n    size,\n    ...rest\n  }) => {\n    /* eslint-disable no-console */\n    if (!isErrorLogged) {\n      if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {\n        console.error(e);\n      }\n\n      console.warn(\"Tried to use the icon '\".concat(name, \"' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.\"), \"To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.\");\n      isErrorLogged = true;\n    }\n\n    return /*#__PURE__*/React.createElement(Text, _extends({}, rest, {\n      style: [styles.icon, {\n        color,\n        fontSize: size\n      }] // @ts-expect-error: Text doesn't support this, but it seems to affect TouchableNativeFeedback\n      ,\n      pointerEvents: \"none\",\n      selectable: false\n    }), \"\\u25A1\");\n  };\n}\n\nexport const accessibilityProps = Platform.OS === 'web' ? {\n  role: 'img',\n  focusable: false\n} : {\n  accessibilityElementsHidden: true,\n  importantForAccessibility: 'no-hide-descendants'\n};\n\nconst defaultIcon = ({\n  name,\n  color,\n  size,\n  direction,\n  allowFontScaling\n}) => /*#__PURE__*/React.createElement(MaterialCommunityIcons, _extends({\n  allowFontScaling: allowFontScaling,\n  name: name,\n  color: color,\n  size: size,\n  style: [{\n    transform: [{\n      scaleX: direction === 'rtl' ? -1 : 1\n    }],\n    lineHeight: size\n  }, styles.icon],\n  pointerEvents: \"none\",\n  selectable: false\n}, accessibilityProps));\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  }\n});\nexport default defaultIcon;","map":{"version":3,"sources":["MaterialCommunityIcon.tsx"],"names":["MaterialCommunityIcons","require","isErrorLogged","rest","e","console","styles","fontSize","size","accessibilityProps","role","focusable","accessibilityElementsHidden","importantForAccessibility","defaultIcon","allowFontScaling","transform","scaleX","direction","lineHeight","icon","backgroundColor"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,IAAA,EAAA,QAAA,QAAA,cAAA;AAUA,IAAA,sBAAA;;AASA,IAAI;AACF;AACAA,EAAAA,sBAAsB,GAAGC,OAAO,CAAPA,kDAAO,CAAPA,CAAzBD,OAAAA;AAFF,CAAA,CAIE,OAAA,CAAA,EAAU;AACV,MAAIE,aAAa,GADP,KACV,CADU,CAGV;;AACAF,EAAAA,sBAAsB,GAAG,CAAC;AAAA,IAAA,IAAA;AAAA,IAAA,KAAA;AAAA,IAAA,IAAA;AAAqB,OAAGG;AAAxB,GAAD,KAAoC;AAC3D;AACA,QAAI,CAAJ,aAAA,EAAoB;AAClB,UACE,CAAC,8DAAA,IAAA,CACCC,CAAC,CAFL,OACG,CADH,EAIE;AACAC,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,CAAAA;AACD;;AAEDA,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA,MAAAA,CAAAA,IAAAA,EAAAA,yHAAAA,CAAAA,EAAAA,sKAAAA;AAKAH,MAAAA,aAAa,GAAbA,IAAAA;AACD;;AAED,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,MAAA,KAAK,EAAE,CAACI,MAAM,CAAP,IAAA,EAAc;AAAA,QAAA,KAAA;AAASC,QAAAA,QAAQ,EAAEC;AAAnB,OAAd,CAFT,CAGE;AAHF;AAIE,MAAA,aAAa,EAJf,MAAA;AAKE,MAAA,UAAU,EAAE;AALd,KAAA,CAAA,EADF,QACE,CADF;AAnBFR,GAAAA;AA+BD;;AAED,OAAO,MAAMS,kBAAkB,GAC7B,QAAQ,CAAR,EAAA,KAAA,KAAA,GACI;AACEC,EAAAA,IAAI,EADN,KAAA;AAEEC,EAAAA,SAAS,EAAE;AAFb,CADJ,GAKI;AACEC,EAAAA,2BAA2B,EAD7B,IAAA;AAEEC,EAAAA,yBAAyB,EAAE;AAF7B,CANC;;AAWP,MAAMC,WAAW,GAAG,CAAC;AAAA,EAAA,IAAA;AAAA,EAAA,KAAA;AAAA,EAAA,IAAA;AAAA,EAAA,SAAA;AAKnBC,EAAAA;AALmB,CAAD,KAAA,aAOlB,KAAA,CAAA,aAAA,CAAA,sBAAA,EAAA,QAAA,CAAA;AACE,EAAA,gBAAgB,EADlB,gBAAA;AAEE,EAAA,IAAI,EAFN,IAAA;AAGE,EAAA,KAAK,EAHP,KAAA;AAIE,EAAA,IAAI,EAJN,IAAA;AAKE,EAAA,KAAK,EAAE,CACL;AACEC,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,MAAM,EAAEC,SAAS,KAATA,KAAAA,GAAsB,CAAtBA,CAAAA,GAA2B;AAArC,KAAD,CADb;AAEEC,IAAAA,UAAU,EAAEX;AAFd,GADK,EAKLF,MAAM,CAVV,IAKS,CALT;AAYE,EAAA,aAAa,EAZf,MAAA;AAaE,EAAA,UAAU,EAAE;AAbd,CAAA,EAPF,kBAOE,CAAA,CAPF;;AAyBA,MAAMA,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/Bc,EAAAA,IAAI,EAAE;AACJC,IAAAA,eAAe,EAAE;AADb;AADyB,CAAlB,CAAf;AAMA,eAAA,WAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, Platform, TextProps, ViewProps } from 'react-native';\n\nexport type IconProps = {\n  name: string;\n  color: string;\n  size: number;\n  direction: 'rtl' | 'ltr';\n  allowFontScaling?: boolean;\n};\n\nlet MaterialCommunityIcons: React.ComponentType<\n  TextProps & {\n    name: string;\n    color: string;\n    size: number;\n    pointerEvents?: ViewProps['pointerEvents'];\n  }\n>;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons')\n    .default;\n} catch (e) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  MaterialCommunityIcons = ({ name, color, size, ...rest }) => {\n    /* eslint-disable no-console */\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          e.message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      <Text\n        {...rest}\n        style={[styles.icon, { color, fontSize: size }]}\n        // @ts-expect-error: Text doesn't support this, but it seems to affect TouchableNativeFeedback\n        pointerEvents=\"none\"\n        selectable={false}\n      >\n        â–¡\n      </Text>\n    );\n  };\n}\n\nexport const accessibilityProps =\n  Platform.OS === 'web'\n    ? {\n        role: 'img',\n        focusable: false,\n      }\n    : {\n        accessibilityElementsHidden: true,\n        importantForAccessibility: 'no-hide-descendants' as 'no-hide-descendants',\n      };\n\nconst defaultIcon = ({\n  name,\n  color,\n  size,\n  direction,\n  allowFontScaling,\n}: IconProps) => (\n  <MaterialCommunityIcons\n    allowFontScaling={allowFontScaling}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n        lineHeight: size,\n      },\n      styles.icon,\n    ]}\n    pointerEvents=\"none\"\n    selectable={false}\n    {...accessibilityProps}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n"]},"metadata":{},"sourceType":"module"}