{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, TextInput as NativeTextInput, Platform } from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nclass TextInput extends React.Component {\n  constructor(..._args) {\n    super(..._args);\n\n    _defineProperty(this, \"validInputValue\", this.props.value !== undefined ? this.props.value : this.props.defaultValue);\n\n    _defineProperty(this, \"state\", {\n      labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n      error: new Animated.Value(this.props.error ? 1 : 0),\n      focused: false,\n      placeholder: '',\n      value: this.validInputValue,\n      labelLayout: {\n        measured: false,\n        width: 0,\n        height: 0\n      },\n      leftLayout: {\n        width: null,\n        height: null\n      },\n      rightLayout: {\n        width: null,\n        height: null\n      }\n    });\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"showPlaceholder\", () => {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      } // Set the placeholder in a delay to offset the label animation\n      // If we show it immediately, they'll overlap and look ugly\n\n\n      this.timer = setTimeout(() => this.setState({\n        placeholder: this.props.placeholder\n      }), 50);\n    });\n\n    _defineProperty(this, \"hidePlaceholder\", () => this.setState({\n      placeholder: ''\n    }));\n\n    _defineProperty(this, \"timer\", void 0);\n\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"showError\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(this, \"hideError\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.error, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(this, \"restoreLabel\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(this, \"minimizeLabel\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(this, \"onLeftAffixLayoutChange\", event => {\n      this.setState({\n        leftLayout: {\n          height: event.nativeEvent.layout.height,\n          width: event.nativeEvent.layout.width\n        }\n      });\n    });\n\n    _defineProperty(this, \"onRightAffixLayoutChange\", event => {\n      this.setState({\n        rightLayout: {\n          width: event.nativeEvent.layout.width,\n          height: event.nativeEvent.layout.height\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleFocus\", args => {\n      if (this.props.disabled || !this.props.editable) {\n        return;\n      }\n\n      this.setState({\n        focused: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(args);\n      }\n    });\n\n    _defineProperty(this, \"handleBlur\", args => {\n      if (!this.props.editable) {\n        return;\n      }\n\n      this.setState({\n        focused: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(args);\n      }\n    });\n\n    _defineProperty(this, \"handleChangeText\", value => {\n      if (!this.props.editable) {\n        return;\n      }\n\n      this.setState({\n        value\n      });\n      this.props.onChangeText && this.props.onChangeText(value);\n    });\n\n    _defineProperty(this, \"handleLayoutAnimatedText\", e => {\n      this.setState({\n        labelLayout: {\n          width: e.nativeEvent.layout.width,\n          height: e.nativeEvent.layout.height,\n          measured: true\n        }\n      });\n    });\n\n    _defineProperty(this, \"forceFocus\", () => {\n      var _this$root;\n\n      return (_this$root = this.root) === null || _this$root === void 0 ? void 0 : _this$root.focus();\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged = prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = prevProps.label !== this.props.label;\n    const isErrorChanged = prevProps.error !== this.props.error;\n\n    if (isFocusChanged || isValueChanged || // workaround for animated regression for react native > 0.61\n    // https://github.com/callstack/react-native-paper/pull/1440\n    isLabelLayoutChanged) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  setNativeProps(args) {\n    return this.root && this.root.setNativeProps(args);\n  }\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n\n\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n  /**\n   * Removes all text from the TextInput.\n   */\n\n\n  clear() {\n    return this.root && this.root.clear();\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    return this.root && this.root.focus();\n  }\n  /**\n   * Removes focus from the input.\n   */\n\n\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const {\n      mode,\n      ...rest\n    } = this.props;\n    return mode === 'outlined' ? /*#__PURE__*/React.createElement(TextInputOutlined, _extends({}, rest, {\n      value: this.state.value,\n      parentState: this.state,\n      innerRef: ref => {\n        this.root = ref;\n      },\n      onFocus: this.handleFocus,\n      forceFocus: this.forceFocus,\n      onBlur: this.handleBlur,\n      onChangeText: this.handleChangeText,\n      onLayoutAnimatedText: this.handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: this.onRightAffixLayoutChange\n    })) : /*#__PURE__*/React.createElement(TextInputFlat, _extends({}, rest, {\n      value: this.state.value,\n      parentState: this.state,\n      innerRef: ref => {\n        this.root = ref;\n      },\n      onFocus: this.handleFocus,\n      forceFocus: this.forceFocus,\n      onBlur: this.handleBlur,\n      onChangeText: this.handleChangeText,\n      onLayoutAnimatedText: this.handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: this.onRightAffixLayoutChange\n    }));\n  }\n\n}\n\n_defineProperty(TextInput, \"Icon\", TextInputIcon);\n\n_defineProperty(TextInput, \"Affix\", TextInputAffix);\n\n_defineProperty(TextInput, \"defaultProps\", {\n  mode: 'flat',\n  dense: false,\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: props => /*#__PURE__*/React.createElement(NativeTextInput, props)\n});\n\nexport default withTheme(TextInput);","map":{"version":3,"sources":["TextInput.tsx"],"names":["TextInput","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","React","TextInputIcon","TextInputAffix","mode","dense","disabled","error","multiline","editable","render","props","getDerivedStateFromProps","value","nextProps","prevState","labeled","Animated","focused","placeholder","labelLayout","measured","width","height","leftLayout","rightLayout","componentDidUpdate","isFocusChanged","isValueChanged","isLabelLayoutChanged","isLabelChanged","prevProps","isErrorChanged","componentWillUnmount","clearTimeout","setTimeout","scale","toValue","duration","useNativeDriver","ios","default","event","args","e","setNativeProps","isFocused","clear","focus","blur","rest","ref","onRightAffixLayoutChange","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, State } from './types';\nimport type { $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  // @component ./Adornment/TextInputIcon.tsx\n  static Icon = TextInputIcon;\n\n  // @component ./Adornment/TextInputAffix.tsx\n  static Affix = TextInputAffix;\n\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n  validInputValue =\n    this.props.value !== undefined ? this.props.value : this.props.defaultValue;\n\n  state = {\n    labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value: this.validInputValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n    leftLayout: {\n      width: null,\n      height: null,\n    },\n    rightLayout: {\n      width: null,\n      height: null,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged =\n      prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = prevProps.label !== this.props.label;\n    const isErrorChanged = prevProps.error !== this.props.error;\n\n    if (\n      isFocusChanged ||\n      isValueChanged ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      isLabelLayoutChanged\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    this.timer = (setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    ) as unknown) as NodeJS.Timeout;\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: NodeJS.Timeout;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private hideError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private minimizeLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      leftLayout: {\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      },\n    });\n  };\n\n  private onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      rightLayout: {\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      },\n    });\n  };\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  forceFocus = () => {\n    return this.root?.focus();\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}