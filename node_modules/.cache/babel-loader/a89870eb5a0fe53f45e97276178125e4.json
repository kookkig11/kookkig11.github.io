{"ast":null,"code":"import _ from 'lodash';\n\nconst createShorthand = (name, type) => ({\n  name,\n  type: _.isUndefined(type) ? name : type\n});\n\nexport const SIDES = createShorthand('Sides', '');\nexport const CORNERS = createShorthand('Corners', '');\nexport const HORIZONTAL = createShorthand('Horizontal');\nexport const VERTICAL = createShorthand('Vertical');\nexport const LEFT = 'Left';\nexport const RIGHT = 'Right';\nexport const TOP = 'Top';\nexport const BOTTOM = 'Bottom';\nexport const TOP_RIGHT = 'TopRight';\nexport const BOTTOM_RIGHT = 'BottomRight';\nexport const TOP_LEFT = 'TopLeft';\nexport const BOTTOM_LEFT = 'BottomLeft'; // Shorthands normalizers creators.\n// This creators provide standard normalizer used in most cases.\n// When style property has any of this shorthands, use this creators\n// to create shorthand normalizer.\n\nclass ShorthandsNormalizerFactory {\n  constructor() {\n    this.createNormalizersMap = {\n      [SIDES.name]: this.createAllSidesNormalizer,\n      [CORNERS.name]: this.createAllCornersNormalizer,\n      [HORIZONTAL.name]: this.createHorizontalSidesNormalizer,\n      [VERTICAL.name]: this.createVerticalSidesNormalizer\n    };\n  }\n\n  createAllSidesNormalizer(prop, shorthand, suffix = '') {\n    return val => ({\n      [prop + LEFT + suffix]: val,\n      [prop + RIGHT + suffix]: val,\n      [prop + TOP + suffix]: val,\n      [prop + BOTTOM + suffix]: val\n    });\n  }\n\n  createAllCornersNormalizer(prop, shorthand, suffix = '') {\n    return val => ({\n      [prop + BOTTOM_LEFT + suffix]: val,\n      [prop + BOTTOM_RIGHT + suffix]: val,\n      [prop + TOP_LEFT + suffix]: val,\n      [prop + TOP_RIGHT + suffix]: val\n    });\n  }\n\n  createHorizontalSidesNormalizer(prop) {\n    return val => ({\n      [prop + LEFT]: val,\n      [prop + RIGHT]: val\n    });\n  }\n\n  createVerticalSidesNormalizer(prop) {\n    return val => ({\n      [prop + TOP]: val,\n      [prop + BOTTOM]: val\n    });\n  }\n\n  getNormalizerCreator(shorthand) {\n    return this.createNormalizersMap[shorthand.name];\n  }\n\n  createNormalizer(prop, shorthand, suffix) {\n    const normalizerCreator = this.getNormalizerCreator(shorthand);\n    return normalizerCreator(prop, shorthand, suffix);\n  }\n\n}\n\nexport default new ShorthandsNormalizerFactory();","map":{"version":3,"sources":["/Users/kanitttha/comsci - year 4/covid-timeline/node_modules/native-base-shoutem-theme/src/StyleNormalizer/ShorthandsNormalizerFactory.js"],"names":["_","createShorthand","name","type","isUndefined","SIDES","CORNERS","HORIZONTAL","VERTICAL","LEFT","RIGHT","TOP","BOTTOM","TOP_RIGHT","BOTTOM_RIGHT","TOP_LEFT","BOTTOM_LEFT","ShorthandsNormalizerFactory","constructor","createNormalizersMap","createAllSidesNormalizer","createAllCornersNormalizer","createHorizontalSidesNormalizer","createVerticalSidesNormalizer","prop","shorthand","suffix","val","getNormalizerCreator","createNormalizer","normalizerCreator"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nconst createShorthand = (name, type) => ({ name, type: _.isUndefined(type) ? name : type });\n\nexport const SIDES = createShorthand('Sides', '');\nexport const CORNERS = createShorthand('Corners', '');\nexport const HORIZONTAL = createShorthand('Horizontal');\nexport const VERTICAL = createShorthand('Vertical');\n\nexport const LEFT = 'Left';\nexport const RIGHT = 'Right';\nexport const TOP = 'Top';\nexport const BOTTOM = 'Bottom';\nexport const TOP_RIGHT = 'TopRight';\nexport const BOTTOM_RIGHT = 'BottomRight';\nexport const TOP_LEFT = 'TopLeft';\nexport const BOTTOM_LEFT = 'BottomLeft';\n\n// Shorthands normalizers creators.\n// This creators provide standard normalizer used in most cases.\n// When style property has any of this shorthands, use this creators\n// to create shorthand normalizer.\n\nclass ShorthandsNormalizerFactory {\n  constructor() {\n    this.createNormalizersMap = {\n      [SIDES.name]: this.createAllSidesNormalizer,\n      [CORNERS.name]: this.createAllCornersNormalizer,\n      [HORIZONTAL.name]: this.createHorizontalSidesNormalizer,\n      [VERTICAL.name]: this.createVerticalSidesNormalizer,\n    };\n  }\n\n  createAllSidesNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + LEFT + suffix]: val,\n      [prop + RIGHT + suffix]: val,\n      [prop + TOP + suffix]: val,\n      [prop + BOTTOM + suffix]: val,\n    });\n  }\n\n  createAllCornersNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + BOTTOM_LEFT + suffix]: val,\n      [prop + BOTTOM_RIGHT + suffix]: val,\n      [prop + TOP_LEFT + suffix]: val,\n      [prop + TOP_RIGHT + suffix]: val,\n    });\n  }\n\n  createHorizontalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + LEFT]: val,\n      [prop + RIGHT]: val,\n    });\n  }\n\n  createVerticalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + TOP]: val,\n      [prop + BOTTOM]: val,\n    });\n  }\n\n  getNormalizerCreator(shorthand) {\n    return this.createNormalizersMap[shorthand.name];\n  }\n\n  createNormalizer(prop, shorthand, suffix) {\n    const normalizerCreator = this.getNormalizerCreator(shorthand);\n    return normalizerCreator(prop, shorthand, suffix);\n  }\n}\n\nexport default new ShorthandsNormalizerFactory();\n"]},"metadata":{},"sourceType":"module"}