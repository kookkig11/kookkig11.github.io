{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), /*#__PURE__*/React.createElement(View, {\n    style: {\n      opacity: indeterminate || checked ? 1 : 0\n    }\n  }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS); // @component-docs ignore-next-line\n\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS); // @component-docs ignore-next-line\n\nexport { CheckboxIOSWithTheme as CheckboxIOS };","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","rest","checked","status","indeterminate","checkedColor","disabled","theme","rippleColor","color","icon","styles","testID","opacity","container","borderRadius","padding","withTheme","CheckboxIOSWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}